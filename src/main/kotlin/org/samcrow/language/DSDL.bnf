{
  parserClass="org.samcrow.language.parser.DsdlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Dsdl"
  psiImplClassSuffix="Impl"
  psiPackage="org.samcrow.language.psi"
  psiImplPackage="org.samcrow.language.psi.impl"

  elementTypeHolderClass="org.samcrow.language.psi.DsdlTypes"
  elementTypeClass="org.samcrow.language.psi.DsdlElementType"
  tokenTypeClass="org.samcrow.language.psi.DsdlTokenType"
}

//simpleFile ::= item_*
//
//private item_ ::= (property|COMMENT|CRLF)
//
//property ::= (KEY? SEPARATOR VALUE?) | KEY

dsdlFile ::= line_ (CRLF line_)*
private line_ ::= statement_? COMMENT?

private statement_ ::= (statement_directive | statement_service_response_marker | statement_attribute)


statement_attribute ::= statement_constant
                    | statement_field
                    | statement_padding_field

statement_constant      ::= type identifier "=" expression
statement_field         ::= type identifier
statement_padding_field ::= type_void ""  // The trailing empty symbol is to prevent the node from being optimized away.

statement_service_response_marker ::= "---" "-"+  // Separates request|response, specifies that the definition is a service.

statement_directive ::= statement_directive_with_expression
                    | statement_directive_without_expression
statement_directive_with_expression    ::= DSDL_DIRECTIVE  expression  // The expression type shall match the directive.
statement_directive_without_expression ::= DSDL_DIRECTIVE

// ==================================================== Data types ====================================================

type ::= type_array
     | type_scalar

type_array ::= type_array_variable_inclusive
           | type_array_variable_exclusive
           | type_array_fixed

type_array_variable_inclusive ::= type_scalar "[" "<=" expression "]"  // Expression shall yield integer.
type_array_variable_exclusive ::= type_scalar "[" "<"  expression "]"
type_array_fixed              ::= type_scalar "["      expression "]"

type_scalar ::= type_versioned
            | type_primitive
            | type_void

type_versioned         ::= identifier ("." identifier)* "." type_version_specifier
type_version_specifier ::= literal_integer_decimal "." literal_integer_decimal

type_primitive ::= type_primitive_truncated
               | type_primitive_saturated

type_primitive_truncated ::=  "truncated"    type_primitive_name
type_primitive_saturated ::= ("saturated" )? type_primitive_name     // Defaults to this.

type_primitive_name ::= type_primitive_name_boolean
                    | type_primitive_name_unsigned_integer
                    | type_primitive_name_signed_integer
                    | type_primitive_name_floating_point

type_primitive_name_boolean          ::= "bool"
type_primitive_name_unsigned_integer ::= "uint"  type_bit_length_suffix
type_primitive_name_signed_integer   ::= "int"   type_bit_length_suffix
type_primitive_name_floating_point   ::= "float" type_bit_length_suffix

type_void ::= "void" type_bit_length_suffix

type_bit_length_suffix ::= ""// TODO: Move to lexer ~r"[1-9]\d*"

// ==================================================== Expressions ====================================================

expression ::= ex_logical    // Aliased for clarity.

expression_list ::= (expression ("," expression)*)?     // May be empty.

expression_parenthesized ::= "(" expression ")"         // Used for managing precedence.

expression_atom ::= expression_parenthesized                  // Ordering matters.
                | type
                | literal
                | identifier

// Operators. The precedence relations are expressed in the rules; the order here is from lower to higher.
// Operators that share common prefix (e.g. < and <=) are arranged so that the longest form is specified first.
ex_logical        ::= ex_logical_not    (op2_log ex_logical_not)*
ex_logical_not    ::= op1_form_log_not | ex_comparison
ex_comparison     ::= ex_bitwise        (op2_cmp ex_bitwise)*
ex_bitwise        ::= ex_additive       (op2_bit ex_additive)*
ex_additive       ::= ex_multiplicative (op2_add ex_multiplicative)*
ex_multiplicative ::= ex_inversion      (op2_mul ex_inversion)*
ex_inversion      ::= op1_form_inv_pos | op1_form_inv_neg | ex_exponential
ex_exponential    ::= ex_attribute      (op2_exp ex_inversion)?     // Right recursion
ex_attribute      ::= expression_atom   (op2_attrib identifier)*

// Unary operator forms are moved into separate rules for ease of parsing.
op1_form_log_not ::= "!" ex_logical_not    // Right recursion
op1_form_inv_pos ::= "+" ex_exponential
op1_form_inv_neg ::= "-" ex_exponential

// Logical operators; defined for booleans.
op2_log ::= op2_log_or | op2_log_and
op2_log_or  ::= "||"
op2_log_and ::= "&&"

// Comparison operators.
op2_cmp ::= op2_cmp_equ | op2_cmp_geq | op2_cmp_leq | op2_cmp_neq | op2_cmp_lss | op2_cmp_grt  // Ordering is important.
op2_cmp_equ ::= "=="
op2_cmp_neq ::= "!="
op2_cmp_leq ::= "<="
op2_cmp_geq ::= ">="
op2_cmp_lss ::= "<"
op2_cmp_grt ::= ">"

// Bitwise integer manipulation operators.
op2_bit ::= op2_bit_or | op2_bit_xor | op2_bit_and
op2_bit_or  ::= "|"
op2_bit_xor ::= "^"
op2_bit_and ::= "&"

// Additive operators.
op2_add ::= op2_add_add | op2_add_sub
op2_add_add ::= "+"
op2_add_sub ::= "-"

// Multiplicative operators.
op2_mul ::= op2_mul_mul | op2_mul_div | op2_mul_mod  // Ordering is important.
op2_mul_mul ::= "*"
op2_mul_div ::= "|"
op2_mul_mod ::= "%"

// Exponential operators.
op2_exp ::= op2_exp_pow
op2_exp_pow ::= "**"

// The most tightly bound binary operator - attribute reference.
op2_attrib ::= "."

// ===================================================== Literals =====================================================

literal ::= literal_set           // Ordering is important to avoid ambiguities.
        | literal_real
        | literal_integer
        | LITERAL_STRING
        | LITERAL_BOOL

// Set.
literal_set ::= "{" expression_list "}"

// Integer.
literal_integer ::= literal_integer_binary
                | literal_integer_octal
                | literal_integer_hexadecimal
                | literal_integer_decimal
literal_integer_binary      ::= "" // TODO move to lexer ~r"0[bB](_?(0|1))+"
literal_integer_octal       ::= "" // TODO move to lexer ~r"0[oO](_?[0-7])+"
literal_integer_hexadecimal ::= "" // TODO move to lexer ~r"0[xX](_?[0-9a-fA-F])+"
literal_integer_decimal     ::= "" // TODO move to lexer ~r"(0(_?0)*)+|([1-9](_?[0-9])*)"

// Real. Exponent notation is defined first to avoid ambiguities.
literal_real ::= literal_real_exponent_notation
             | literal_real_point_notation
literal_real_exponent_notation ::= (literal_real_point_notation | literal_real_digits) literal_real_exponent
literal_real_point_notation    ::= (literal_real_digits? literal_real_fraction) | (literal_real_digits ".")
literal_real_fraction          ::= "." literal_real_digits
literal_real_exponent          ::= "" // TODO move to lexer ~r"[eE][+-]?" literal_real_digits
literal_real_digits            ::= "" // TODO move to lexer ~r"[0-9](_?[0-9])*"
